module  mario_color_mapper ( input        [9:0] MarioX, MarioY, DrawX, DrawY, Mario_size,
                            inout [9:0] MarioX_pixel, MarioY_pixel,
                            input [4:0] mario_num;
                       output logic [7:0]  Red, Green, Blue );
    
    logic mario_on;
	 
 /* Old Ball: Generated square box by checking if the current pixel is within a square of length
    2*Ball_Size, centered at (BallX, BallY).  Note that this requires unsigned comparisons.
	 
    if ((DrawX >= BallX - Ball_size) &&
       (DrawX <= BallX + Ball_size) &&
       (DrawY >= BallY - Ball_size) &&
       (DrawY <= BallY + Ball_size))

     New Ball: Generates (pixelated) circle by using the standard circle formula.  Note that while 
     this single line is quite powerful descriptively, it causes the synthesis tool to use up three
     of the 12 available multipliers on the chip!  Since the multiplicants are required to be signed,
	  we have to first cast them from logic to int (signed by default) before they are multiplied). */
	  
    int DistX, DistY, Size;
	assign DistX = DrawX - MarioX;
    assign DistY = DrawY - MarioY;
    assign Size = Mario_size;

    logic [7:0]  R, G, B;
	  
    always_comb
    begin:Mario_on_proc
        if ( ( DistX*DistX + DistY*DistY) <= (Size * Size) ) 
            mario_on = 1'b1;
        else 
            mario_on = 1'b0;
     end 
       
    always_comb
    begin:RGB_Display
        if ((mario_on == 1'b1)) 
        begin 
            Red = 8'hff;
            Green = 8'h55;
            Blue = 8'h00;

            mario_palette mario_palette (
               .Clk(Clk),
               .MarioX_pixel(MarioX_pixel), .MarioY_pixel(MarioY_pixel),
                .mario_num(mario_num),
               .R(R), .G(G), .B(B)
               );

        end       
        else 
        begin 
            Red = 8'h00; 
            Green = 8'h00;
            // Blue = 8'h7f - DrawX[9:3];
            Blue = 8'h7f;
        end      
    end 
    
endmodule
