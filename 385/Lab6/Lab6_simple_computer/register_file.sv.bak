module register_file (
									input logic [15:0] Data_in, 
									input logic [2:0] DRMUX_out, SR1MUX_out, SR2_sel,
									input logic LD_Reg, Clk, 
									output logic [15:0] SR1_out, SR2_out,
									output logic LD_R0, LD_R1, LD_R2, LD_R3, LD_R4, LD_R5, LD_R6, LD_R7);
									
									
									logic [15:0] R0_val, R1_val, R2_val, R3_val, R4_val, R5_val, R6_val, R7_val;
									
									//Load data into the registers
									always_comb
									begin
										case (DRMUX_out)
											3b'000: LD_R0 = LD_Reg;
													  LD_R1 = 1'b0;
													  LD_R2 = 1'b0;
													  LD_R3 = 1'b0;
													  LD_R4 = 1'b0;
													  LD_R5 = 1'b0;
													  LD_R6 = 1'b0;
													  LD_R7 = 1'b0;
													  
											3b'001: LD_R0 = 1'b0;
													  LD_R1 = LD_Reg;
													  LD_R2 = 1'b0;
													  LD_R3 = 1'b0;
													  LD_R4 = 1'b0;
													  LD_R5 = 1'b0;
													  LD_R6 = 1'b0;
													  LD_R7 = 1'b0;
													  
											3b'010: LD_R0 = 1'b0;
													  LD_R1 = 1'b0;
													  LD_R2 = LD_Reg;
													  LD_R3 = 1'b0;
													  LD_R4 = 1'b0;
													  LD_R5 = 1'b0;
													  LD_R6 = 1'b0;
													  LD_R7 = 1'b0;
													  
											3b'011: LD_R0 = 1'b0;
													  LD_R1 = 1'b0;
													  LD_R2 = 1'b0;
													  LD_R3 = LD_Reg;
													  LD_R4 = 1'b0;
													  LD_R5 = 1'b0;
													  LD_R6 = 1'b0;
													  LD_R7 = 1'b0;
													  
											3b'100: LD_R0 = 1'b0;
													  LD_R1 = 1'b0;
													  LD_R2 = 1'b0;
													  LD_R3 = 1'b0;
													  LD_R4 = LD_Reg;
													  LD_R5 = 1'b0;
													  LD_R6 = 1'b0;
													  LD_R7 = 1'b0;
													  
											3b'101: LD_R0 = 1'b0;
													  LD_R1 = 1'b0;
													  LD_R2 = 1'b0;
													  LD_R3 = 1'b0;
													  LD_R4 = 1'b0;
													  LD_R5 = LD_Reg;
													  LD_R6 = 1'b0;
													  LD_R7 = 1'b0;
													  
											3b'110: LD_R0 = 1'b0;
													  LD_R1 = 1'b0;
													  LD_R2 = 1'b0;
													  LD_R3 = 1'b0;
													  LD_R4 = 1'b0;
													  LD_R5 = 1'b0;
													  LD_R6 = LD_Reg;
													  LD_R7 = 1'b0;
													  
											3b'111: LD_R0 = 1'b0;
													  LD_R1 = 1'b0;
													  LD_R2 = 1'b0;
													  LD_R3 = 1'b0;
													  LD_R4 = 1'b0;
													  LD_R5 = 1'b0;
													  LD_R6 = 1'b0;
													  LD_R7 = LD_Reg;
										endcase
									end
									
									R0 (.LD_R0, .Reset, .Clk, .Data_in, .R0_val);
									R1 (.LD_R1, .Reset, .Clk, .Data_in, .R1_val);
									R2 (.LD_R2, .Reset, .Clk, .Data_in, .R2_val);
									R3 (.LD_R3, .Reset, .Clk, .Data_in, .R3_val);
									R4 (.LD_R4, .Reset, .Clk, .Data_in, .R4_val);
									R5 (.LD_R5, .Reset, .Clk, .Data_in, .R5_val);
									R6 (.LD_R6, .Reset, .Clk, .Data_in, .R6_val);
									R7 (.LD_R7, .Reset, .Clk, .Data_in, .R7_val);
									
									//Get data from the registers
									always_comb
									begin
										case (SR1MUX_out)
											3b'000: SR1_out = R0_val;
											3b'001: SR1_out = R1_val;
											3b'010: SR1_out = R2_val;
											3b'011: SR1_out = R3_val;
											3b'100: SR1_out = R4_val;
											3b'101: SR1_out = R5_val;
											3b'110: SR1_out = R6_val;
											3b'111: SR1_out = R7_val;
										endcase
									end
									
									always_comb
									begin
										case (SR2_sel)
											3b'000: SR2_out = R0_val;
											3b'001: SR2_out = R1_val;
											3b'010: SR2_out = R2_val;
											3b'011: SR2_out = R3_val;
											3b'100: SR2_out = R4_val;
											3b'101: SR2_out = R5_val;
											3b'110: SR2_out = R6_val;
											3b'111: SR2_out = R7_val;
										endcase
									end
endmodule
